// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  phone         String?
  dateOfBirth   DateTime?
  experience    Experience @default(BEGINNER)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile       UserProfile?
  instructor    Instructor?
  bookings      Booking[]    @relation("DriverBookings")
  reviews       Review[]     @relation("UserReviews")
  messages      Message[]    @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  progress      Progress[]
  videos        Video[]
  payments      Payment[]
  notifications Notification[]

  @@map("users")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  vehicleMake     String?
  vehicleModel    String?
  vehicleYear     Int?
  vehicleColor    String?
  emergencyContact String?
  medicalInfo     String?
  preferences     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Instructor Management
model Instructor {
  id              String   @id @default(cuid())
  userId          String   @unique
  isVerified      Boolean  @default(false)
  specialties     String[]
  certifications  String[]
  yearsExperience Int
  hourlyRate      Float
  bio             String?
  availability    Json?
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings        Booking[] @relation("InstructorBookings")
  reviews         Review[] @relation("InstructorReviews")

  @@map("instructors")
}



// Session Management
model Session {
  id              String   @id @default(cuid())
  location        String   // General location instead of specific track
  date            DateTime
  startTime       String
  endTime         String
  maxParticipants Int
  currentParticipants Int @default(0)
  price           Float
  type            SessionType
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookings        Booking[]

  @@map("sessions")
}

// Booking System
model Booking {
  id              String   @id @default(cuid())
  sessionId       String
  driverId        String
  instructorId    String?
  status          BookingStatus @default(PENDING)
  totalPrice      Float
  notes           String?
  specialRequests String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  session         Session    @relation(fields: [sessionId], references: [id])
  driver          User       @relation("DriverBookings", fields: [driverId], references: [id])
  instructor      Instructor? @relation("InstructorBookings", fields: [instructorId], references: [id])
  payment         Payment?
  progress        Progress[]
  reviews         Review[]

  @@map("bookings")
}

// Progress Tracking
model Progress {
  id              String   @id @default(cuid())
  userId          String
  bookingId       String?
  lapTime         Float?   // in seconds
  topSpeed        Float?   // in mph
  cornerSpeed     Float?   // in mph
  brakingDistance Float?   // in feet
  notes           String?
  date            DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  booking         Booking? @relation(fields: [bookingId], references: [id])

  @@map("progress")
}

// Video Analysis
model Video {
  id              String   @id @default(cuid())
  userId          String
  bookingId       String?
  title           String
  description     String?
  url             String
  thumbnail       String?
  duration        Int?     // in seconds
  analysis        Json?    // AI analysis results
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])

  @@map("videos")
}

// Review System
model Review {
  id              String   @id @default(cuid())
  bookingId       String   @unique
  reviewerId      String
  instructorId    String
  rating          Int      // 1-5 stars
  comment         String?
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  booking         Booking  @relation(fields: [bookingId], references: [id])
  reviewer        User     @relation("UserReviews", fields: [reviewerId], references: [id])
  instructor      Instructor @relation("InstructorReviews", fields: [instructorId], references: [id])

  @@map("reviews")
}

// Messaging System
model Message {
  id              String   @id @default(cuid())
  senderId        String
  receiverId      String
  content         String
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sender          User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver        User     @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

// Payment System
model Payment {
  id              String   @id @default(cuid())
  bookingId       String   @unique
  userId          String
  amount          Float
  currency        String   @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?
  stripePaymentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  booking         Booking  @relation(fields: [bookingId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

// Notification System
model Notification {
  id              String   @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  isRead          Boolean  @default(false)
  data            Json?
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Enums
enum Experience {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SessionType {
  OPEN_TRACK
  INSTRUCTION
  RACE
  TIME_TRIAL
  PRACTICE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  SESSION_REMINDER
  NEW_MESSAGE
  REVIEW_RECEIVED
  SYSTEM_UPDATE
}
